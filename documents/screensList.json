{
  "key": "screensList",
  "value": [
    {
      "component": "ログインフォーム（メールアドレス パスワード） ログインボタン パスワードリセットリンク",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "operatingProcedure": "1. メールアドレスを入力\n2. パスワードを入力\n3. ログインボタンをクリック\n4. 認証成功時はダッシュボードへ遷移 失敗時はエラーメッセージを表示",
      "description": "ユーザーがシステムにログインするための画面",
      "id": "SCR-001",
      "screenName": "ログイン画面",
      "category": "認証",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "auth.ts",
          "handleProcedure": "1. クライアントから受け取ったメールアドレスとパスワードを検証\n2. データベースでユーザー情報を確認\n3. パスワードのハッシュを比較\n4. 認証成功時にJWTトークンを生成\n5. 生成したトークンをクライアントに返す",
          "relatedScreen": "SCR-001",
          "handleName": "ユーザー認証",
          "description": "ユーザーのログイン認証を処理し JWTトークンを発行する",
          "id": "BAC-001",
          "category": "認証",
          "relatedFrontendCode": "import React, { useState, FormEvent } from 'react'\nimport { useRouter } from 'next/router'\nimport Topbar from '@/components/Topbar'\nimport { supabase } from '@/supabase'\nimport { FaEnvelope, FaLock } from 'react-icons/fa'\nimport Link from 'next/link'\n\nconst Login: React.FC = () => {\n    const router = useRouter()\n    const [email, setEmail] = useState<string>('')\n    const [password, setPassword] = useState<string>('')\n    const [error, setError] = useState<string>('')\n\n    const handleLogin = async (e: FormEvent) => {\n        e.preventDefault()\n        setError('')\n        const { error } = await supabase.auth.signIn({\n            email,\n            password,\n        })\n        if (error) {\n            setError('ログインに失敗しました。メールアドレスとパスワードを確認してください。')\n        } else {\n            router.push('/dashboard')\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen h-full bg-f8f8f8\">\n            <Topbar />\n            <div className=\"flex justify-center items-center mt-16\">\n                <div className=\"w-full max-w-md bg-white p-8 rounded shadow\">\n                    <h2 className=\"text-2xl font-bold text-indigo-700 mb-6 text-center\">ログイン</h2>\n                    {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n                    <form onSubmit={handleLogin}>\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"email\" className=\"block text-gray-700 mb-2\">メールアドレス</label>\n                            <div className=\"flex items-center border-b border-gray-300 focus-within:border-indigo-500\">\n                                <FaEnvelope className=\"text-gray-400 mr-2\" />\n                                <input\n                                    type=\"email\"\n                                    id=\"email\"\n                                    value={email}\n                                    onChange={(e) => setEmail(e.target.value)}\n                                    required\n                                    className=\"w-full py-2 px-0 bg-transparent focus:outline-none text-gray-700\"\n                                    placeholder=\"例: user@example.com\"\n                                />\n                            </div>\n                        </div>\n                        <div className=\"mb-6\">\n                            <label htmlFor=\"password\" className=\"block text-gray-700 mb-2\">パスワード</label>\n                            <div className=\"flex items-center border-b border-gray-300 focus-within:border-indigo-500\">\n                                <FaLock className=\"text-gray-400 mr-2\" />\n                                <input\n                                    type=\"password\"\n                                    id=\"password\"\n                                    value={password}\n                                    onChange={(e) => setPassword(e.target.value)}\n                                    required\n                                    className=\"w-full py-2 px-0 bg-transparent focus:outline-none text-gray-700\"\n                                    placeholder=\"パスワードを入力\"\n                                />\n                            </div>\n                        </div>\n                        <button\n                            type=\"submit\"\n                            className=\"w-full bg-indigo-600 text-white py-2 rounded hover:bg-indigo-500 active:bg-indigo-700 transition duration-300\"\n                        >\n                            ログイン\n                        </button>\n                    </form>\n                    <div className=\"mt-4 text-center\">\n                        <Link href=\"/password-reset\">\n                            <a className=\"text-indigo-600 hover:text-indigo-500\">パスワードをお忘れですか？</a>\n                        </Link>\n                    </div>\n                    <div className=\"mt-6 flex justify-center\">\n                        <img src=\"https://placehold.co/150x150\" alt=\"プレースホルダー画像\" className=\"w-24 h-24\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login"
        }
      ]
    },
    {
      "component": "プロジェクト一覧 新規プロジェクト作成ボタン 各機能へのクイックアクセスリンク",
      "accessRight": "ログインユーザー",
      "fileName": "dashboard.tsx",
      "operatingProcedure": "1. プロジェクト一覧から既存プロジェクトを選択\n2. 新規プロジェクト作成ボタンをクリックして新規作成\n3. クイックアクセスリンクから各機能画面へ遷移",
      "description": "ユーザーのプロジェクト概要と主要機能へのアクセスを提供する画面",
      "id": "SCR-002",
      "screenName": "ダッシュボード",
      "category": "メイン",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ファイル選択ボタン ドラッグ&ドロップエリア アップロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "file-upload.tsx",
      "operatingProcedure": "1. ファイル選択ボタンをクリックしてファイルを選択またはドラッグ&ドロップでファイルを指定\n2. アップロードボタンをクリックしてファイルをアップロード\n3. アップロード完了後 ドキュメント生成画面へ自動遷移",
      "description": "テキストファイルまたはPDFファイルをアップロードする画面",
      "id": "SCR-003",
      "screenName": "ファイルアップロード画面",
      "category": "入力",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "file-upload.ts",
          "handleProcedure": "1. マルチパートフォームデータを解析\n2. ファイルの種類とサイズを検証\n3. 一時的なストレージにファイルを保存\n4. 保存されたファイルのパスをデータベースに記録\n5. ファイルの保存場所情報をクライアントに返す",
          "relatedScreen": "SCR-003",
          "handleName": "ファイルアップロード処理",
          "description": "クライアントからアップロードされたファイルを受け取り 一時保存する",
          "id": "BAC-002",
          "category": "ファイル処理",
          "relatedFrontendCode": "import { useState, useEffect, ChangeEvent, DragEvent } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { FaUpload } from 'react-icons/fa';\n\nconst FileUpload = () => {\n    const router = useRouter();\n    const [user, setUser] = useState<any>(null);\n    const [file, setFile] = useState<File | null>(null);\n    const [isUploading, setIsUploading] = useState<boolean>(false);\n    const [error, setError] = useState<string>('');\n\n    useEffect(() => {\n        const session = supabase.auth.session();\n        if (session) {\n            setUser(session.user);\n        } else {\n            router.push('/login');\n        }\n\n        const { data: authListener } = supabase.auth.onAuthStateChange(\n            (event, session) => {\n                if (session) {\n                    setUser(session.user);\n                } else {\n                    setUser(null);\n                    router.push('/login');\n                }\n            }\n        );\n\n        return () => {\n            authListener?.unsubscribe();\n        };\n    }, [router]);\n\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            setFile(e.target.files[0]);\n        }\n    };\n\n    const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n            setFile(e.dataTransfer.files[0]);\n        }\n    };\n\n    const handleUpload = async () => {\n        if (!file) {\n            setError('ファイルが選択されていません。');\n            return;\n        }\n\n        setIsUploading(true);\n        setError('');\n\n        const fileExt = file.name.split('.').pop();\n        const fileName = `${Date.now()}.${fileExt}`;\n        const filePath = `${user?.id}/${fileName}`;\n\n        const { data, error: uploadError } = await supabase.storage\n            .from('uploads')\n            .upload(filePath, file);\n\n        if (uploadError) {\n            setError('ファイルのアップロードに失敗しました。');\n            setIsUploading(false);\n            return;\n        }\n\n        const { error: dbError } = await supabase\n            .from('documents')\n            .insert([\n                {\n                    project_id: 'プロジェクトIDをここに入力',\n                    type: file.type.includes('pdf') ? 'PDF' : 'テキスト',\n                    content: JSON.stringify({ title: file.name, sections: [] }),\n                },\n            ]);\n\n        if (dbError) {\n            setError('データベースへの記録に失敗しました。');\n            setIsUploading(false);\n            return;\n        }\n\n        router.push('/document-generation');\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                <aside className=\"w-64 bg-white shadow-md\">\n                    <nav className=\"mt-10\">\n                        <a href=\"/dashboard\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-primary hover:text-white\">\n                            ダッシュボード\n                        </a>\n                        <a href=\"/file-upload\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-primary hover:text-white\">\n                            ファイルアップロード\n                        </a>\n                        <a href=\"/document-generation\" className=\"block py-2.5 px-4 rounded transition duration-200 hover:bg-primary hover:text-white\">\n                            ドキュメント生成\n                        </a>\n                        {/* 他のナビゲーションリンクを追加 */}\n                    </nav>\n                </aside>\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6\">ファイルアップロード画面</h1>\n                    <div\n                        className=\"border-2 border-dashed border-primary rounded-lg p-6 text-center cursor-pointer bg-white\"\n                        onDragOver={handleDragOver}\n                        onDrop={handleDrop}\n                    >\n                        <FaUpload className=\"text-4xl text-primary mx-auto mb-4\" />\n                        <p className=\"text-gray-700\">ファイルをドラッグ&ドロップするか、以下のボタンをクリックして選択してください。</p>\n                        <input\n                            type=\"file\"\n                            accept=\".txt, .pdf\"\n                            className=\"hidden\"\n                            id=\"file-upload\"\n                            onChange={handleFileChange}\n                        />\n                        <label htmlFor=\"file-upload\" className=\"mt-4 inline-block bg-primary text-white py-2 px-4 rounded hover:bg-blue-700 transition duration-300\">\n                            ファイル選択\n                        </label>\n                        {file && (\n                            <div className=\"mt-4\">\n                                <p className=\"text-gray-800\">選択されたファイル: {file.name}</p>\n                                <img src=\"https://placehold.co/400x200\" alt=\"ファイルプレビュー\" className=\"mt-2 mx-auto\" />\n                            </div>\n                        )}\n                    </div>\n                    {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n                    <button\n                        onClick={handleUpload}\n                        className=\"mt-6 bg-secondary text-white py-2 px-4 rounded hover:bg-teal-500 transition duration-300\"\n                        disabled={isUploading}\n                    >\n                        {isUploading ? 'アップロード中...' : 'アップロード'}\n                    </button>\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUpload;"
        }
      ]
    },
    {
      "component": "生成オプション選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "document-generation.tsx",
      "operatingProcedure": "1. 生成するドキュメントの種類を選択\n2. 生成開始ボタンをクリック\n3. 生成進捗をリアルタイムで表示\n4. 生成完了後 ドキュメント表示画面へ自動遷移",
      "description": "アップロードしたファイルから開発ドキュメントを生成する画面",
      "id": "SCR-004",
      "screenName": "ドキュメント生成画面",
      "category": "生成",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "document-generation.ts",
          "handleProcedure": "1. データベースから対象ファイルの情報を取得\n2. ファイルの内容を読み込み\n3. AIモデルにファイル内容を入力し ドキュメントを生成\n4. 生成されたドキュメントをフォーマット\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-004",
          "handleName": "ドキュメント生成",
          "description": "アップロードされたファイルの内容を分析し AIを使用して開発ドキュメントを生成する",
          "id": "BAC-003",
          "category": "AI処理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Link from 'next/link'\nimport Topbar from '@/components/Topbar'\nimport supabase from '@/supabase'\nimport { FaSpinner } from 'react-icons/fa'\n\nconst DocumentGeneration = () => {\n    const router = useRouter()\n    const [user, setUser] = useState(null)\n    const [documentType, setDocumentType] = useState('')\n    const [isGenerating, setIsGenerating] = useState(false)\n    const [progress, setProgress] = useState(0)\n    const [error, setError] = useState('')\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            const { data: { user } } = await supabase.auth.getUser()\n            if (user) {\n                setUser(user)\n            } else {\n                router.push('/login')\n            }\n        }\n        fetchUser()\n    }, [router])\n\n    const handleGenerate = async () => {\n        if (!documentType) {\n            setError('ドキュメントの種類を選択してください。')\n            return\n        }\n        setError('')\n        setIsGenerating(true)\n        setProgress(0)\n        try {\n            const { data, error } = await supabase\n                .from('documents')\n                .insert([{ type: documentType, created_by: user.id }])\n                .select()\n            if (error) throw error\n            const documentId = data[0].id\n            // Start generation process\n            const generationResponse = await fetch('/api/document-generation', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ documentId }),\n            })\n            if (!generationResponse.ok) {\n                throw new Error('ドキュメント生成に失敗しました。')\n            }\n            // Polling for progress\n            const interval = setInterval(async () => {\n                const { data, error } = await supabase\n                    .from('documents')\n                    .select('content')\n                    .eq('id', documentId)\n                    .single()\n                if (error) {\n                    clearInterval(interval)\n                    setError('進捗の取得に失敗しました。')\n                    setIsGenerating(false)\n                    return\n                }\n                if (data.content && data.content.progress) {\n                    setProgress(data.content.progress)\n                    if (data.content.progress >= 100) {\n                        clearInterval(interval)\n                        router.push(`/document-display?id=${documentId}`)\n                    }\n                }\n            }, 1000)\n        } catch (err) {\n            setError(err.message)\n            setIsGenerating(false)\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                <nav className=\"w-64 bg-white shadow-md h-screen\">\n                    <ul className=\"mt-10\">\n                        <li className=\"mt-2\">\n                            <Link href=\"/dashboard\">\n                                <a className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-blue-100\">\n                                    ダッシュボード\n                                </a>\n                            </Link>\n                        </li>\n                        <li className=\"mt-2\">\n                            <Link href=\"/file-upload\">\n                                <a className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-blue-100\">\n                                    ファイルアップロード\n                                </a>\n                            </Link>\n                        </li>\n                        <li className=\"mt-2\">\n                            <Link href=\"/document-generation\">\n                                <a className=\"flex items-center px-4 py-2 text-blue-500 bg-blue-50\">\n                                    ドキュメント生成\n                                </a>\n                            </Link>\n                        </li>\n                        <li className=\"mt-2\">\n                            <Link href=\"/source-code-generation\">\n                                <a className=\"flex items-center px-4 py-2 text-gray-700 hover:bg-blue-100\">\n                                    ソースコード生成\n                                </a>\n                            </Link>\n                        </li>\n                        {/* 他のリンクも同様に追加 */}\n                    </ul>\n                </nav>\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">ドキュメント生成画面</h1>\n                    {error && <div className=\"mb-4 text-red-500\">{error}</div>}\n                    <div className=\"bg-white p-6 rounded shadow-md\">\n                        <label className=\"block mb-4\">\n                            <span className=\"text-gray-700\">生成するドキュメントの種類</span>\n                            <select\n                                className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n                                value={documentType}\n                                onChange={(e) => setDocumentType(e.target.value)}\n                            >\n                                <option value=\"\">選択してください</option>\n                                <option value=\"要件定義\">要件定義</option>\n                                <option value=\"システム設計\">システム設計</option>\n                                <option value=\"開発\">開発</option>\n                                <option value=\"テスト\">テスト</option>\n                                <option value=\"提案資料\">提案資料</option>\n                            </select>\n                        </label>\n                        <button\n                            onClick={handleGenerate}\n                            className=\"mt-4 w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n                            disabled={isGenerating}\n                        >\n                            {isGenerating ? (\n                                <div className=\"flex items-center justify-center\">\n                                    <FaSpinner className=\"animate-spin mr-2\" />\n                                    生成中...\n                                </div>\n                            ) : (\n                                '生成開始'\n                            )}\n                        </button>\n                        {isGenerating && (\n                            <div className=\"mt-6\">\n                                <div className=\"flex justify-between mb-2\">\n                                    <span className=\"text-sm font-medium text-blue-700\">進捗: {progress}%</span>\n                                </div>\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div\n                                        className=\"bg-blue-500 h-4 rounded-full\"\n                                        style={{ width: `${progress}%` }}\n                                    ></div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nexport default DocumentGeneration"
        }
      ]
    },
    {
      "component": "生成対象選択 プログラミング言語選択 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "code-generation.tsx",
      "operatingProcedure": "1. 生成対象のドキュメントを選択\n2. 生成するプログラミング言語を選択\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 ソースコード表示画面へ自動遷移",
      "description": "生成された開発ドキュメントからソースコードを生成する画面",
      "id": "SCR-005",
      "screenName": "ソースコード生成画面",
      "category": "生成",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "code-generation.ts",
          "handleProcedure": "1. データベースから対象ドキュメントの情報を取得\n2. ドキュメントの内容を解析\n3. AIモデルにドキュメント内容を入力し ソースコードを生成\n4. 生成されたコードをフォーマットおよび最適化\n5. 生成結果をデータベースに保存\n6. 生成完了通知をクライアントに送信",
          "relatedScreen": "SCR-005",
          "handleName": "ソースコード生成",
          "description": "生成された開発ドキュメントを基に AIを使用してソースコードを生成する",
          "id": "BAC-004",
          "category": "AI処理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Topbar from '@/components/Topbar'\nimport supabase from '@/supabase'\nimport axios from 'axios'\nimport { FaFileAlt, FaCode, FaSpinner } from 'react-icons/fa'\n\nconst CodeGeneration = () => {\n    const router = useRouter()\n    const [user, setUser] = useState(null)\n    const [documents, setDocuments] = useState([])\n    const [selectedDocument, setSelectedDocument] = useState('')\n    const [language, setLanguage] = useState('')\n    const [isGenerating, setIsGenerating] = useState(false)\n    const [progress, setProgress] = useState(0)\n    const programmingLanguages = ['JavaScript', 'Python', 'TypeScript', 'Java', 'C#']\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            const { data: { user }, error } = await supabase.auth.getUser()\n            if (error || !user) {\n                router.push('/login')\n            } else {\n                setUser(user)\n                fetchDocuments(user.id)\n            }\n        }\n\n        const fetchDocuments = async (userId) => {\n            const { data, error } = await supabase\n                .from('documents')\n                .select('id, type, content')\n                .eq('created_by', userId)\n            if (error) {\n                console.error('ドキュメントの取得に失敗しました。サンプルデータを表示します。')\n                setDocuments([\n                    { id: '1', type: '要件定義', content: { title: 'サンプルドキュメント', sections: [{ heading: 'セクション1', content: '内容1' }] } },\n                    { id: '2', type: 'システム設計', content: { title: '設計ドキュメント', sections: [{ heading: 'セクションA', content: '内容A' }] } },\n                ])\n            } else {\n                setDocuments(data)\n            }\n        }\n\n        fetchUser()\n    }, [router])\n\n    const handleGenerate = async () => {\n        if (!selectedDocument || !language) {\n            alert('ドキュメントとプログラミング言語を選択してください。')\n            return\n        }\n\n        setIsGenerating(true)\n        setProgress(0)\n\n        try {\n            const response = await axios.post('/api/code-generation', {\n                documentId: selectedDocument,\n                language: language,\n            })\n\n            if (response.status === 200) {\n                const generationId = response.data.generationId\n                const interval = setInterval(async () => {\n                    const statusRes = await axios.get(`/api/code-generation/status/${generationId}`)\n                    if (statusRes.status === 200) {\n                        setProgress(statusRes.data.progress)\n                        if (statusRes.data.progress >= 100) {\n                            clearInterval(interval)\n                            router.push(`/source-code-display?id=${response.data.sourceCodeId}`)\n                        }\n                    } else {\n                        clearInterval(interval)\n                        alert('生成ステータスの取得に失敗しました。')\n                        setIsGenerating(false)\n                    }\n                }, 2000)\n            } else {\n                alert('コード生成の開始に失敗しました。')\n                setIsGenerating(false)\n            }\n        } catch (error) {\n            console.error('生成プロセスでエラーが発生しました:', error)\n            alert('生成プロセス中にエラーが発生しました。サンプルデータを表示します。')\n            setProgress(100)\n            setIsGenerating(false)\n            router.push(`/source-code-display?id=sample`)\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen h-full bg-[#F8F8F8]\">\n            <Topbar />\n            <div className=\"flex\">\n                <aside className=\"w-64 bg-white shadow-md\">\n                    <nav className=\"mt-10\">\n                        <a href=\"/dashboard\" className=\"flex items-center py-2 px-8 text-gray-700 hover:bg-[#F5A623] hover:text-white\">\n                            <FaFileAlt className=\"mr-3\" />\n                            ダッシュボード\n                        </a>\n                        <a href=\"/file-upload\" className=\"flex items-center py-2 px-8 text-gray-700 hover:bg-[#F5A623] hover:text-white\">\n                            <FaFileAlt className=\"mr-3\" />\n                            ファイルアップロード\n                        </a>\n                        <a href=\"/document-generation\" className=\"flex items-center py-2 px-8 text-gray-700 hover:bg-[#F5A623] hover:text-white\">\n                            <FaFileAlt className=\"mr-3\" />\n                            ドキュメント生成\n                        </a>\n                        <a href=\"/code-generation\" className=\"flex items-center py-2 px-8 text-gray-700 bg-[#F5A623] text-white\">\n                            <FaCode className=\"mr-3\" />\n                            ソースコード生成\n                        </a>\n                        {/* 他のナビゲーションリンクをここに追加 */}\n                    </nav>\n                </aside>\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6 text-[#333333]\">ソースコード生成</h1>\n                    <div className=\"bg-white p-6 rounded-lg shadow-md\">\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 text-sm font-medium mb-2\" htmlFor=\"document\">\n                                生成対象のドキュメントを選択\n                            </label>\n                            <select\n                                id=\"document\"\n                                value={selectedDocument}\n                                onChange={(e) => setSelectedDocument(e.target.value)}\n                                className=\"w-full border-b-2 border-gray-300 focus:border-[#4A90E2] py-2 px-4 text-gray-700\"\n                            >\n                                <option value=\"\">ドキュメントを選択</option>\n                                {documents.map((doc) => (\n                                    <option key={doc.id} value={doc.id}>\n                                        {doc.type} - {doc.content.title}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 text-sm font-medium mb-2\" htmlFor=\"language\">\n                                生成するプログラミング言語を選択\n                            </label>\n                            <select\n                                id=\"language\"\n                                value={language}\n                                onChange={(e) => setLanguage(e.target.value)}\n                                className=\"w-full border-b-2 border-gray-300 focus:border-[#4A90E2] py-2 px-4 text-gray-700\"\n                            >\n                                <option value=\"\">言語を選択</option>\n                                {programmingLanguages.map((lang) => (\n                                    <option key={lang} value={lang}>\n                                        {lang}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"flex justify-center\">\n                            <button\n                                onClick={handleGenerate}\n                                className={`bg-[#4A90E2] text-white font-medium py-2 px-6 rounded-lg hover:bg-[#3b7dc4] active:bg-[#2a5aa3] transition duration-300 ${isGenerating ? 'cursor-not-allowed' : ''}`}\n                                disabled={isGenerating}\n                            >\n                                {isGenerating ? (\n                                    <div className=\"flex items-center\">\n                                        <FaSpinner className=\"animate-spin mr-2\" />\n                                        生成中...\n                                    </div>\n                                ) : (\n                                    '生成開始'\n                                )}\n                            </button>\n                        </div>\n                        {isGenerating && (\n                            <div className=\"mt-6\">\n                                <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n                                    生成進捗\n                                </label>\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div\n                                        className=\"bg-[#50E3C2] h-4 rounded-full\"\n                                        style={{ width: `${progress}%` }}\n                                    ></div>\n                                </div>\n                                <p className=\"text-center mt-2 text-gray-700\">{progress}% 完了</p>\n                            </div>\n                        )}\n                    </div>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nexport default CodeGeneration"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントまたはソースコードを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 品質チェック結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードの品質を自動チェックする画面",
      "id": "SCR-006",
      "screenName": "品質チェック画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "quality-check.ts",
          "handleProcedure": "1. データベースから対象ドキュメントとコードを取得\n2. ドキュメントの一貫性と完全性をチェック\n3. コードの構文エラーおよびベストプラクティス違反をチェック\n4. チェック結果をスコア化\n5. 詳細な問題点と改善提案を生成\n6. チェック結果をデータベースに保存\n7. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-006",
          "handleName": "自動品質チェック",
          "description": "生成されたドキュメントとソースコードの品質を自動でチェックする",
          "id": "BAC-005",
          "category": "品質管理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\nimport { FaUpload, FaCheck, FaSpinner } from 'react-icons/fa';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype Document = {\n    id: string;\n    project_id: string;\n    type: string;\n    content: any;\n    created_at: string;\n    updated_at: string;\n};\n\ntype SourceCode = {\n    id: string;\n    project_id: string;\n    file_name: string;\n    content: string;\n    created_at: string;\n    updated_at: string;\n};\n\ntype QualityCheck = {\n    id: string;\n    project_id: string;\n    type: string;\n    result: any;\n    created_at: string;\n};\n\nconst QualityCheckPage = () => {\n    const router = useRouter();\n    const [documents, setDocuments] = useState<Document[]>([]);\n    const [sourceCodes, setSourceCodes] = useState<SourceCode[]>([]);\n    const [selectedItems, setSelectedItems] = useState<string[]>([]);\n    const [isChecking, setIsChecking] = useState(false);\n    const [progress, setProgress] = useState<number>(0);\n    const [qualityCheckId, setQualityCheckId] = useState<string>('');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const user = supabase.auth.user();\n            if (!user) {\n                router.push('/login');\n                return;\n            }\n\n            const { data: docData, error: docError } = await supabase\n                .from<Document>('documents')\n                .select('*')\n                .eq('created_by', user.id);\n\n            if (docError) {\n                console.error(docError);\n                setDocuments([]);\n            } else {\n                setDocuments(docData || []);\n            }\n\n            const { data: srcData, error: srcError } = await supabase\n                .from<SourceCode>('source_codes')\n                .select('*')\n                .eq('created_by', user.id);\n\n            if (srcError) {\n                console.error(srcError);\n                setSourceCodes([]);\n            } else {\n                setSourceCodes(srcData || []);\n            }\n        };\n\n        fetchData();\n    }, [router]);\n\n    useEffect(() => {\n        if (qualityCheckId) {\n            const subscription = supabase\n                .from<QualityCheck>(`quality_checks:id=eq.${qualityCheckId}`)\n                .on('UPDATE', payload => {\n                    const result = payload.new.result;\n                    const score = result.score;\n                    setProgress(score);\n                    if (score >= 100) {\n                        setIsChecking(false);\n                        router.push(`/quality-check-result?id=${qualityCheckId}`);\n                    }\n                })\n                .subscribe();\n\n            return () => {\n                supabase.removeSubscription(subscription);\n            };\n        }\n    }, [qualityCheckId, router]);\n\n    const handleSelection = (id: string) => {\n        setSelectedItems(prev =>\n            prev.includes(id) ? prev.filter(item => item !== id) : [...prev, id]\n        );\n    };\n\n    const startCheck = async () => {\n        if (selectedItems.length === 0) {\n            alert('チェック対象を選択してください');\n            return;\n        }\n\n        setIsChecking(true);\n        const newQualityCheckId = uuidv4();\n        setQualityCheckId(newQualityCheckId);\n\n        const { data, error } = await supabase\n            .from('quality_checks')\n            .insert([\n                {\n                    id: newQualityCheckId,\n                    project_id: 'プロジェクトIDをここに',\n                    type: 'ドキュメント',\n                    result: { score: 0, issues: [] },\n                },\n            ]);\n\n        if (error) {\n            console.error(error);\n            setIsChecking(false);\n            alert('品質チェックの開始に失敗しました');\n        } else {\n            // 実際の品質チェックロジックをここに実装\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex flex-col items-center p-8\">\n                <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">品質チェック画面</h1>\n                <div className=\"w-full max-w-4xl bg-white shadow-md rounded p-6\">\n                    <div className=\"mb-4\">\n                        <h2 className=\"text-xl font-medium text-gray-700 mb-2\">チェック対象の選択</h2>\n                        <div className=\"flex flex-col\">\n                            <span className=\"font-semibold text-gray-600\">ドキュメント</span>\n                            {documents.length > 0 ? (\n                                documents.map(doc => (\n                                    <label key={doc.id} className=\"flex items-center mt-2\">\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"form-checkbox h-5 w-5 text-blue-600\"\n                                            checked={selectedItems.includes(doc.id)}\n                                            onChange={() => handleSelection(doc.id)}\n                                        />\n                                        <span className=\"ml-2 text-gray-700\">{doc.type} - {doc.id}</span>\n                                    </label>\n                                ))\n                            ) : (\n                                <p className=\"text-gray-500\">ドキュメントがありません</p>\n                            )}\n                        </div>\n                        <div className=\"flex flex-col mt-4\">\n                            <span className=\"font-semibold text-gray-600\">ソースコード</span>\n                            {sourceCodes.length > 0 ? (\n                                sourceCodes.map(src => (\n                                    <label key={src.id} className=\"flex items-center mt-2\">\n                                        <input\n                                            type=\"checkbox\"\n                                            className=\"form-checkbox h-5 w-5 text-blue-600\"\n                                            checked={selectedItems.includes(src.id)}\n                                            onChange={() => handleSelection(src.id)}\n                                        />\n                                        <span className=\"ml-2 text-gray-700\">{src.file_name}</span>\n                                    </label>\n                                ))\n                            ) : (\n                                <p className=\"text-gray-500\">ソースコードがありません</p>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"flex justify-center mt-6\">\n                        <button\n                            onClick={startCheck}\n                            className={`flex items-center px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none ${\n                                isChecking ? 'opacity-50 cursor-not-allowed' : ''\n                            }`}\n                            disabled={isChecking}\n                        >\n                            {isChecking ? <FaSpinner className=\"animate-spin mr-2\" /> : <FaCheck className=\"mr-2\" />}\n                            チェック開始\n                        </button>\n                    </div>\n                    {isChecking && (\n                        <div className=\"mt-6 text-center\">\n                            <p className=\"text-gray-700\">チェックが進行中です...</p>\n                            <div className=\"w-full bg-gray-200 rounded-full mt-2\">\n                                <div\n                                    className=\"bg-blue-600 text-xs leading-none py-1 text-center text-white rounded-full\"\n                                    style={{ width: `${progress}%` }}\n                                >\n                                    {progress}%\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <div className=\"mt-8\">\n                    <img src=\"https://placehold.co/600x400\" alt=\"品質チェックイメージ\" className=\"rounded shadow-md\" />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default QualityCheckPage;"
        }
      ]
    },
    {
      "component": "チェック対象選択 チェック開始ボタン チェック進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check.tsx",
      "operatingProcedure": "1. チェック対象のドキュメントを選択\n2. チェック開始ボタンをクリック\n3. チェック進捗をリアルタイムで表示\n4. チェック完了後 整合性確認結果画面へ自動遷移",
      "description": "各工程間のドキュメントの整合性を自動でチェックする画面",
      "id": "SCR-007",
      "screenName": "整合性確認画面",
      "category": "品質管理",
      "user": "開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "consistency-check.ts",
          "handleProcedure": "1. データベースから関連するすべてのドキュメントを取得\n2. ドキュメント間の関連性を分析\n3. キーワードと概念の一貫性をチェック\n4. 要件とデザインの追跡可能性を確認\n5. 不整合箇所を特定し リスト化\n6. 整合性スコアを計算\n7. チェック結果と修正提案をデータベースに保存\n8. 結果サマリーをクライアントに送信",
          "relatedScreen": "SCR-007",
          "handleName": "ドキュメント整合性チェック",
          "description": "各工程間のドキュメントの整合性を自動でチェックし確保する",
          "id": "BAC-006",
          "category": "品質管理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Topbar from '@/components/Topbar';\nimport { createClient } from '@supabase/supabase-js';\nimport { FaCheck, FaSpinner } from 'react-icons/fa';\nimport axios from 'axios';\nimport Image from 'next/image';\n\nconst supabase = createClient('https://your-supabase-url.supabase.co', 'your-anon-key');\n\nconst ConsistencyCheck = () => {\n    const router = useRouter();\n    const [documents, setDocuments] = useState<any[]>([]);\n    const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);\n    const [isChecking, setIsChecking] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const fetchDocuments = async () => {\n            const user = supabase.auth.user();\n            if (!user) {\n                router.push('/login');\n                return;\n            }\n            try {\n                const { data, error } = await supabase\n                    .from('documents')\n                    .select('id, type, content, created_at')\n                    .eq('created_by', user.id);\n                if (error) throw error;\n                setDocuments(data);\n            } catch (err) {\n                console.error(err);\n                setError('ドキュメントの取得に失敗しました。サンプルデータを表示します。');\n                setDocuments([\n                    {\n                        id: 'sample-1',\n                        type: '要件定義',\n                        content: { title: 'サンプルタイトル', sections: [{ heading: 'セクション1', content: '内容1' }] },\n                        created_at: new Date().toISOString(),\n                    },\n                ]);\n            }\n        };\n        fetchDocuments();\n    }, [router]);\n\n    const handleSelect = (id: string) => {\n        setSelectedDocuments(prev =>\n            prev.includes(id) ? prev.filter(docId => docId !== id) : [...prev, id]\n        );\n    };\n\n    const startCheck = async () => {\n        if (selectedDocuments.length === 0) {\n            alert('チェックするドキュメントを選択してください。');\n            return;\n        }\n        setIsChecking(true);\n        setProgress(0);\n        setError(null);\n        try {\n            const response = await axios.post('/api/consistency-check', {\n                documentIds: selectedDocuments,\n            });\n            const checkId = response.data.checkId;\n            const interval = setInterval(async () => {\n                const statusRes = await axios.get(`/api/consistency-check/${checkId}`);\n                const status = statusRes.data.status;\n                setProgress(status.progress);\n                if (status.complete) {\n                    clearInterval(interval);\n                    router.push('/整合性確認結果画面');\n                }\n            }, 1000);\n        } catch (err) {\n            console.error(err);\n            setError('整合性チェックの開始に失敗しました。');\n            setIsChecking(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                <aside className=\"w-64 bg-white shadow-md p-4\">\n                    <nav className=\"space-y-2\">\n                        <a href=\"/ダッシュボード\" className=\"flex items-center p-2 text-gray-700 hover:bg-gray-200 rounded\">\n                            <FaCheck className=\"mr-2\" />\n                            ダッシュボード\n                        </a>\n                        <a href=\"/ファイルアップロード画面\" className=\"flex items-center p-2 text-gray-700 hover:bg-gray-200 rounded\">\n                            <FaCheck className=\"mr-2\" />\n                            ファイルアップロード\n                        </a>\n                        {/* 他のナビゲーションリンクを追加 */}\n                    </nav>\n                </aside>\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-4 text-gray-800\">整合性確認画面</h1>\n                    <div className=\"bg-white p-6 rounded shadow\">\n                        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">チェック対象のドキュメントを選択</h2>\n                        {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n                        <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                            {documents.map(doc => (\n                                <label key={doc.id} className=\"flex items-center space-x-2\">\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={selectedDocuments.includes(doc.id)}\n                                        onChange={() => handleSelect(doc.id)}\n                                        className=\"form-checkbox h-5 w-5 text-blue-600\"\n                                    />\n                                    <span className=\"text-gray-700\">{doc.type} - {doc.content.title}</span>\n                                </label>\n                            ))}\n                        </div>\n                        <button\n                            onClick={startCheck}\n                            className={`mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 active:bg-blue-700 flex items-center ${isChecking ? 'justify-center' : ''}`}\n                            disabled={isChecking}\n                        >\n                            {isChecking ? <FaSpinner className=\"animate-spin\" /> : 'チェック開始'}\n                        </button>\n                        {isChecking && (\n                            <div className=\"mt-4\">\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div\n                                        className=\"bg-blue-600 h-4 rounded-full\"\n                                        style={{ width: `${progress}%` }}\n                                    ></div>\n                                </div>\n                                <p className=\"text-gray-700 mt-2\">進捗: {progress}%</p>\n                            </div>\n                        )}\n                    </div>\n                    <div className=\"mt-8\">\n                        <Image src=\"https://placehold.co/600x400\" alt=\"整合性確認イメージ\" width={600} height={400} className=\"rounded shadow\" />\n                    </div>\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default ConsistencyCheck;"
        }
      ]
    },
    {
      "component": "見積対象選択 見積開始ボタン 見積進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation.tsx",
      "operatingProcedure": "1. 見積対象のプロジェクトを選択\n2. 見積開始ボタンをクリック\n3. 見積進捗をリアルタイムで表示\n4. 見積完了後 工数見積結果画面へ自動遷移",
      "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる画面",
      "id": "SCR-008",
      "screenName": "工数見積画面",
      "category": "プロジェクト管理",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": [
        {
          "fileName": "work-estimation.ts",
          "handleProcedure": "1. データベースからプロジェクト関連のすべての成果物を取得\n2. ドキュメントの量と複雑さを分析\n3. コードの行数と複雑度を計算\n4. 過去のプロジェクトデータと比較\n5. AIモデルを使用して各フェーズの工数を予測\n6. 総工数と内訳を計算\n7. 見積結果をデータベースに保存\n8. 見積サマリーをクライアントに送信",
          "relatedScreen": "SCR-008",
          "handleName": "自動工数見積",
          "description": "生成されたドキュメントとソースコードを基に開発工数を自動で見積もる",
          "id": "BAC-007",
          "category": "プロジェクト管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport Topbar from '@/components/Topbar';\nimport supabase from '@/supabase';\nimport { FaProjectDiagram, FaFileAlt, FaCode, FaCheckCircle } from 'react-icons/fa';\nimport { useRouter } from 'next/router';\n\nconst WorkEstimation: React.FC = () => {\n    const router = useRouter();\n    const [projects, setProjects] = useState<any[]>([]);\n    const [selectedProject, setSelectedProject] = useState<string>('');\n    const [isEstimating, setIsEstimating] = useState<boolean>(false);\n    const [progress, setProgress] = useState<number>(0);\n    const [error, setError] = useState<string>('');\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            try {\n                const { data, error } = await supabase\n                    .from('projects')\n                    .select('id, name');\n                if (error) throw error;\n                setProjects(data || []);\n            } catch (err) {\n                console.error(err);\n                // サンプルデータを設定\n                setProjects([\n                    { id: 'sample-project-1', name: 'サンプルプロジェクト1' },\n                    { id: 'sample-project-2', name: 'サンプルプロジェクト2' },\n                ]);\n                setError('プロジェクトの取得に失敗しました。サンプルデータを表示しています。');\n            }\n        };\n\n        fetchProjects();\n    }, []);\n\n    useEffect(() => {\n        let subscription: any;\n\n        if (isEstimating && selectedProject) {\n            subscription = supabase\n                .from(`work_estimates:project_id=eq.${selectedProject}`)\n                .on('UPDATE', payload => {\n                    const estimate = payload.new.estimate;\n                    const totalHours = estimate.total_hours;\n                    const breakdown = estimate.breakdown;\n                    // 進捗を計算（単純な例）\n                    const completedPhases = breakdown.filter((phase: any) => phase.hours > 0).length;\n                    const totalPhases = breakdown.length;\n                    const currentProgress = Math.min((completedPhases / totalPhases) * 100, 100);\n                    setProgress(currentProgress);\n\n                    if (currentProgress >= 100) {\n                        setIsEstimating(false);\n                        router.push(`/work-estimation-result?projectId=${selectedProject}`);\n                    }\n                })\n                .subscribe();\n        }\n\n        return () => {\n            if (subscription) {\n                supabase.removeSubscription(subscription);\n            }\n        };\n    }, [isEstimating, selectedProject, router]);\n\n    const handleStartEstimation = async () => {\n        if (!selectedProject) {\n            setError('プロジェクトを選択してください。');\n            return;\n        }\n\n        setIsEstimating(true);\n        setProgress(0);\n        setError('');\n\n        try {\n            const response = await fetch('/api/work-estimation/start', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ project_id: selectedProject }),\n            });\n\n            if (!response.ok) {\n                throw new Error('見積もりの開始に失敗しました。');\n            }\n        } catch (err: any) {\n            console.error(err);\n            setError(err.message || '見積もりの開始に失敗しました。');\n            setIsEstimating(false);\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                {/* サイドバーが必要な場合はここに追加 */}\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">工数見積画面</h1>\n                    {error && (\n                        <div className=\"mb-4 p-4 bg-red-100 text-red-700 rounded\">\n                            {error}\n                        </div>\n                    )}\n                    <div className=\"bg-white p-6 rounded shadow\">\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"project\" className=\"block text-gray-700 font-medium mb-2\">\n                                見積対象のプロジェクトを選択\n                            </label>\n                            <select\n                                id=\"project\"\n                                value={selectedProject}\n                                onChange={(e) => setSelectedProject(e.target.value)}\n                                className=\"w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500\"\n                            >\n                                <option value=\"\">プロジェクトを選択してください</option>\n                                {projects.map((project) => (\n                                    <option key={project.id} value={project.id}>\n                                        {project.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <button\n                            onClick={handleStartEstimation}\n                            disabled={isEstimating}\n                            className={`w-full flex items-center justify-center px-4 py-2 bg-blue-500 text-white font-medium rounded hover:bg-blue-600 active:bg-blue-700 transition duration-300 ease-out ${\n                                isEstimating ? 'opacity-50 cursor-not-allowed' : ''\n                            }`}\n                        >\n                            {isEstimating ? (\n                                <>\n                                    <FaCheckCircle className=\"mr-2 animate-spin\" />\n                                    見積開始中...\n                                </>\n                            ) : (\n                                '見積開始'\n                            )}\n                        </button>\n                        {isEstimating && (\n                            <div className=\"mt-6\">\n                                <label className=\"block text-gray-700 font-medium mb-2\">\n                                    見積進捗\n                                </label>\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div\n                                        className=\"bg-blue-500 h-4 rounded-full\"\n                                        style={{ width: `${progress}%` }}\n                                    ></div>\n                                </div>\n                                <p className=\"mt-2 text-gray-600\">{Math.round(progress)}% 完了</p>\n                            </div>\n                        )}\n                        {!isEstimating && progress > 0 && (\n                            <div className=\"mt-6\">\n                                <p className=\"text-green-600\">見積が完了しました。</p>\n                                <button\n                                    onClick={() => router.push(`/work-estimation-result?projectId=${selectedProject}`)}\n                                    className=\"mt-4 w-full flex items-center justify-center px-4 py-2 bg-green-500 text-white font-medium rounded hover:bg-green-600 active:bg-green-700 transition duration-300 ease-out\"\n                                >\n                                    見積結果を見る\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                </main>\n            </div>\n        </div>\n    );\n};\n\nexport default WorkEstimation;"
        }
      ]
    },
    {
      "component": "資料作成対象選択 テンプレート選択 作成開始ボタン 作成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-creation.tsx",
      "operatingProcedure": "1. 資料作成対象のプロジェクトを選択\n2. 使用するテンプレートを選択\n3. 作成開始ボタンをクリック\n4. 作成進捗をリアルタイムで表示\n5. 作成完了後 提案資料表示画面へ自動遷移",
      "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する画面",
      "id": "SCR-009",
      "screenName": "提案資料作成画面",
      "category": "資料作成",
      "user": "営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "proposal-creation.ts",
          "handleProcedure": "1. データベースからプロジェクト情報と関連ドキュメントを取得\n2. 選択されたテンプレートを読み込み\n3. ドキュメントから重要な情報を抽出\n4. テンプレートに情報を適用し 提案資料を生成\n5. 生成された資料を最適化およびフォーマット\n6. 資料をPDF形式に変換\n7. 生成された資料をデータベースに保存\n8. 資料のURLをクライアントに送信",
          "relatedScreen": "SCR-009",
          "handleName": "提案資料自動作成",
          "description": "生成されたドキュメントを基にクライアントへの提案資料を自動作成する",
          "id": "BAC-008",
          "category": "資料作成",
          "relatedFrontendCode": "import { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Topbar from '@/components/Topbar'\nimport supabase from '@/supabase'\nimport { FaProjectDiagram, FaFileAlt, FaPlay, FaSpinner } from 'react-icons/fa'\n\nconst ProposalCreation: React.FC = () => {\n    const router = useRouter()\n    const [projects, setProjects] = useState<any[]>([])\n    const [templates, setTemplates] = useState<any[]>([])\n    const [selectedProject, setSelectedProject] = useState<string>('')\n    const [selectedTemplate, setSelectedTemplate] = useState<string>('')\n    const [isCreating, setIsCreating] = useState<boolean>(false)\n    const [progress, setProgress] = useState<number>(0)\n    const [error, setError] = useState<string>('')\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            const { data, error } = await supabase\n                .from('projects')\n                .select('id, name')\n            if (error) {\n                console.error(error)\n                setError('プロジェクトの取得に失敗しました。')\n                // サンプルデータを設定\n                setProjects([\n                    { id: '1', name: 'プロジェクトA' },\n                    { id: '2', name: 'プロジェクトB' }\n                ])\n            } else {\n                setProjects(data)\n            }\n        }\n\n        const fetchTemplates = async () => {\n            // テンプレートは固定と仮定し、サンプルデータを使用\n            setTemplates([\n                { id: 'template1', name: 'テンプレート1' },\n                { id: 'template2', name: 'テンプレート2' }\n            ])\n        }\n\n        fetchProjects()\n        fetchTemplates()\n    }, [])\n\n    const startCreation = async () => {\n        if (!selectedProject || !selectedTemplate) {\n            setError('プロジェクトとテンプレートを選択してください。')\n            return\n        }\n\n        setIsCreating(true)\n        setError('')\n        setProgress(0)\n\n        try {\n            const { data, error } = await supabase\n                .from('creation_jobs')\n                .insert([\n                    { project_id: selectedProject, template_id: selectedTemplate }\n                ])\n                .single()\n\n            if (error) {\n                throw error\n            }\n\n            const jobId = data.id\n\n            const interval = setInterval(async () => {\n                const { data: jobData, error: jobError } = await supabase\n                    .from('creation_jobs')\n                    .select('status, progress')\n                    .eq('id', jobId)\n                    .single()\n\n                if (jobError) {\n                    console.error(jobError)\n                    setError('進捗の取得に失敗しました。')\n                    setIsCreating(false)\n                    clearInterval(interval)\n                    return\n                }\n\n                setProgress(jobData.progress)\n\n                if (jobData.status === 'completed') {\n                    setIsCreating(false)\n                    clearInterval(interval)\n                    router.push('/proposal-display')\n                } else if (jobData.status === 'failed') {\n                    setError('資料作成に失敗しました。')\n                    setIsCreating(false)\n                    clearInterval(interval)\n                }\n            }, 1000)\n        } catch (err) {\n            console.error(err)\n            setError('資料作成の開始に失敗しました。')\n            setIsCreating(false)\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100 flex\">\n            {/* サイドバー */}\n            <aside className=\"w-64 bg-white shadow-md\">\n                <div className=\"p-4\">\n                    <img src=\"https://placehold.co/150x50\" alt=\"ロゴ\" className=\"mb-4\" />\n                    <nav className=\"space-y-2\">\n                        <a href=\"/dashboard\" className=\"flex items-center p-2 text-gray-700 hover:bg-blue-100 rounded\">\n                            <FaProjectDiagram className=\"mr-3\" />\n                            ダッシュボード\n                        </a>\n                        <a href=\"/file-upload\" className=\"flex items-center p-2 text-gray-700 hover:bg-blue-100 rounded\">\n                            <FaFileAlt className=\"mr-3\" />\n                            ファイルアップロード\n                        </a>\n                        <a href=\"/proposal-creation\" className=\"flex items-center p-2 text-blue-500 bg-blue-50 rounded\">\n                            <FaPlay className=\"mr-3\" />\n                            提案資料作成\n                        </a>\n                        {/* 他のナビゲーションリンクを追加 */}\n                    </nav>\n                </div>\n            </aside>\n\n            {/* メインコンテンツ */}\n            <div className=\"flex-1 flex flex-col\">\n                <Topbar />\n\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">提案資料作成画面</h1>\n\n                    {error && (\n                        <div className=\"mb-4 p-4 bg-red-100 text-red-700 rounded\">\n                            {error}\n                        </div>\n                    )}\n\n                    <div className=\"bg-white p-6 rounded shadow-md\">\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 font-medium mb-2\">資料作成対象プロジェクト</label>\n                            <select\n                                value={selectedProject}\n                                onChange={(e) => setSelectedProject(e.target.value)}\n                                className=\"w-full border-b-2 border-gray-300 focus:border-blue-500 px-2 py-1\"\n                            >\n                                <option value=\"\">プロジェクトを選択</option>\n                                {projects.map((project) => (\n                                    <option key={project.id} value={project.id}>\n                                        {project.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 font-medium mb-2\">使用するテンプレート</label>\n                            <select\n                                value={selectedTemplate}\n                                onChange={(e) => setSelectedTemplate(e.target.value)}\n                                className=\"w-full border-b-2 border-gray-300 focus:border-blue-500 px-2 py-1\"\n                            >\n                                <option value=\"\">テンプレートを選択</option>\n                                {templates.map((template) => (\n                                    <option key={template.id} value={template.id}>\n                                        {template.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <div className=\"flex items-center\">\n                            <button\n                                onClick={startCreation}\n                                className={`flex items-center justify-center px-4 py-2 bg-blue-500 text-white font-medium rounded hover:bg-blue-600 active:bg-blue-700 transition duration-300 ${\n                                    isCreating ? 'opacity-50 cursor-not-allowed' : ''\n                                }`}\n                                disabled={isCreating}\n                            >\n                                {isCreating ? (\n                                    <>\n                                        <FaSpinner className=\"animate-spin mr-2\" />\n                                        作成中...\n                                    </>\n                                ) : (\n                                    '作成開始'\n                                )}\n                            </button>\n                        </div>\n\n                        {isCreating && (\n                            <div className=\"mt-6\">\n                                <label className=\"block text-gray-700 font-medium mb-2\">作成進捗</label>\n                                <div className=\"w-full bg-gray-200 rounded\">\n                                    <div\n                                        className=\"bg-blue-500 text-xs leading-none py-1 text-center text-white rounded\"\n                                        style={{ width: `${progress}%` }}\n                                    >\n                                        {progress}%\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"mt-8 flex justify-center\">\n                        <img src=\"https://placehold.co/600x400\" alt=\"提案資料作成イメージ\" className=\"rounded shadow-md\" />\n                    </div>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nexport default ProposalCreation"
        }
      ]
    },
    {
      "component": "レポート対象選択 レポート期間設定 生成開始ボタン 生成進捗表示",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report.tsx",
      "operatingProcedure": "1. レポート対象のプロジェクトを選択\n2. レポート期間を設定\n3. 生成開始ボタンをクリック\n4. 生成進捗をリアルタイムで表示\n5. 生成完了後 進捗レポート表示画面へ自動遷移",
      "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する画面",
      "id": "SCR-010",
      "screenName": "進捗レポート画面",
      "category": "レポーティング",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": [
        {
          "fileName": "progress-report.ts",
          "handleProcedure": "1. データベースからプロジェクトの全アクティビティログを取得\n2. 指定された期間のデータをフィルタリング\n3. 各フェーズの進捗率を計算\n4. 全体の進捗率を算出\n5. 主要な課題や遅延要因を特定\n6. グラフと表を含むレポートを生成\n7. 生成されたレポートをデータベースに保存\n8. レポートのサマリーと閲覧用URLをクライアントに送信",
          "relatedScreen": "SCR-010",
          "handleName": "進捗レポート生成",
          "description": "開発プロセスの進捗状況を自動で集計しレポートを生成する",
          "id": "BAC-009",
          "category": "レポーティング",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport Link from 'next/link'\nimport { AiFillProject, AiFillSetting, AiOutlineLoading3Quarters } from 'react-icons/ai'\nimport Topbar from '@/components/Topbar'\nimport supabase from '@/supabase'\n\nconst ProgressReport: React.FC = () => {\n    const router = useRouter()\n    const [projects, setProjects] = useState<Array<{ id: string; name: string }>>([])\n    const [selectedProject, setSelectedProject] = useState<string>('')\n    const [startDate, setStartDate] = useState<string>('')\n    const [endDate, setEndDate] = useState<string>('')\n    const [isGenerating, setIsGenerating] = useState<boolean>(false)\n    const [progress, setProgress] = useState<number>(0)\n    const [reportId, setReportId] = useState<string>('')\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            const { data, error } = await supabase.from('projects').select('id, name')\n            if (error) {\n                console.error('プロジェクトの取得に失敗しました:', error)\n                setProjects([\n                    { id: 'sample1', name: 'サンプルプロジェクト1' },\n                    { id: 'sample2', name: 'サンプルプロジェクト2' },\n                ])\n            } else {\n                setProjects(data)\n            }\n        }\n        fetchProjects()\n    }, [])\n\n    useEffect(() => {\n        let interval: NodeJS.Timeout\n        if (isGenerating && reportId) {\n            interval = setInterval(async () => {\n                const { data, error } = await supabase\n                    .from('progress_reports')\n                    .select('report')\n                    .eq('id', reportId)\n                    .single()\n                if (error) {\n                    console.error('進捗の取得に失敗しました:', error)\n                    setProgress(0)\n                    clearInterval(interval)\n                } else {\n                    const currentProgress = data.report.overall_progress\n                    setProgress(currentProgress)\n                    if (currentProgress >= 100) {\n                        clearInterval(interval)\n                        router.push('/progress-report-display')\n                    }\n                }\n            }, 1000)\n        }\n        return () => clearInterval(interval)\n    }, [isGenerating, reportId, router])\n\n    const handleGenerate = async () => {\n        if (!selectedProject || !startDate || !endDate) {\n            alert('すべてのフィールドを入力してください。')\n            return\n        }\n        setIsGenerating(true)\n        const { data, error } = await supabase.from('progress_reports').insert([\n            {\n                project_id: selectedProject,\n                report: {\n                    overall_progress: 0,\n                    phases: [],\n                },\n            },\n        ]).select('id')\n        if (error) {\n            console.error('レポートの作成に失敗しました:', error)\n            alert('レポートの作成に失敗しました。サンプルデータを表示します。')\n            setProgress(100)\n            setIsGenerating(false)\n            router.push('/progress-report-display')\n        } else {\n            setReportId(data[0].id)\n        }\n    }\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"flex\">\n                <aside className=\"w-64 bg-white shadow-md\">\n                    <nav className=\"mt-10\">\n                        <Link href=\"/dashboard\">\n                            <a className=\"flex items-center py-2 px-8 text-gray-700 hover:bg-gray-200\">\n                                <AiFillProject className=\"mr-3\" />\n                                ダッシュボード\n                            </a>\n                        </Link>\n                        <Link href=\"/file-upload\">\n                            <a className=\"flex items-center py-2 px-8 text-gray-700 hover:bg-gray-200\">\n                                <AiFillSetting className=\"mr-3\" />\n                                ファイルアップロード画面\n                            </a>\n                        </Link>\n                        <Link href=\"/progress-report\">\n                            <a className=\"flex items-center py-2 px-8 text-gray-700 bg-gray-200\">\n                                <AiFillProject className=\"mr-3\" />\n                                進捗レポート画面\n                            </a>\n                        </Link>\n                        {/* 他のナビゲーションリンクを追加 */}\n                    </nav>\n                </aside>\n                <main className=\"flex-1 p-8\">\n                    <h1 className=\"text-2xl font-bold mb-6\">進捗レポート生成</h1>\n                    <div className=\"bg-white p-6 rounded shadow-md\">\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 text-sm font-medium mb-2\">レポート対象プロジェクト</label>\n                            <select\n                                value={selectedProject}\n                                onChange={(e) => setSelectedProject(e.target.value)}\n                                className=\"w-full border-b-2 border-blue-500 py-2 px-4 focus:outline-none\"\n                            >\n                                <option value=\"\">プロジェクトを選択</option>\n                                {projects.map((project) => (\n                                    <option key={project.id} value={project.id}>\n                                        {project.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                        <div className=\"mb-4\">\n                            <label className=\"block text-gray-700 text-sm font-medium mb-2\">レポート期間設定</label>\n                            <div className=\"flex space-x-4\">\n                                <input\n                                    type=\"date\"\n                                    value={startDate}\n                                    onChange={(e) => setStartDate(e.target.value)}\n                                    className=\"w-1/2 border-b-2 border-blue-500 py-2 px-4 focus:outline-none\"\n                                />\n                                <input\n                                    type=\"date\"\n                                    value={endDate}\n                                    onChange={(e) => setEndDate(e.target.value)}\n                                    className=\"w-1/2 border-b-2 border-blue-500 py-2 px-4 focus:outline-none\"\n                                />\n                            </div>\n                        </div>\n                        <button\n                            onClick={handleGenerate}\n                            className=\"w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 active:bg-blue-700 transition duration-300\"\n                            disabled={isGenerating}\n                        >\n                            生成開始\n                        </button>\n                        {isGenerating && (\n                            <div className=\"mt-6 flex items-center\">\n                                <AiOutlineLoading3Quarters className=\"animate-spin mr-3 text-blue-500\" size={24} />\n                                <span className=\"text-gray-700\">レポートを生成中...</span>\n                            </div>\n                        )}\n                        {isGenerating && (\n                            <div className=\"mt-4\">\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div\n                                        className=\"bg-blue-500 h-4 rounded-full\"\n                                        style={{ width: `${progress}%` }}\n                                    ></div>\n                                </div>\n                                <p className=\"text-gray-700 mt-2\">{progress}% 完了</p>\n                            </div>\n                        )}\n                    </div>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nexport default ProgressReport"
        }
      ]
    },
    {
      "component": "ドキュメント表示エリア 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "document-view.tsx",
      "operatingProcedure": "1. 生成されたドキュメントを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてドキュメントをエクスポート",
      "description": "生成された開発ドキュメントを表示する画面",
      "id": "SCR-011",
      "screenName": "ドキュメント表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "ソースコード表示エリア シンタックスハイライト 編集ボタン ダウンロードボタン",
      "accessRight": "ログインユーザー",
      "fileName": "code-view.tsx",
      "operatingProcedure": "1. 生成されたソースコードを確認\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. ダウンロードボタンをクリックしてソースコードをエクスポート",
      "description": "生成されたソースコードを表示する画面",
      "id": "SCR-012",
      "screenName": "ソースコード表示画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "チェック結果サマリー 詳細結果リスト 改善提案",
      "accessRight": "ログインユーザー",
      "fileName": "quality-check-result.tsx",
      "operatingProcedure": "1. チェック結果のサマリーを確認\n2. 詳細結果リストで個別の問題点を確認\n3. 改善提案を参考に必要な修正を行う",
      "description": "品質チェックの結果を表示する画面",
      "id": "SCR-013",
      "screenName": "品質チェック結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "整合性スコア 不整合箇所リスト 修正提案",
      "accessRight": "ログインユーザー",
      "fileName": "consistency-check-result.tsx",
      "operatingProcedure": "1. 整合性スコアを確認\n2. 不整合箇所リストで具体的な問題点を確認\n3. 修正提案を参考に必要な調整を行う",
      "description": "ドキュメント間の整合性チェック結果を表示する画面",
      "id": "SCR-014",
      "screenName": "整合性確認結果画面",
      "category": "表示",
      "user": "開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "総工数表示 フェーズ別工数内訳 工数調整オプション",
      "accessRight": "ログインユーザー",
      "fileName": "work-estimation-result.tsx",
      "operatingProcedure": "1. 総工数を確認\n2. フェーズ別工数内訳を確認\n3. 必要に応じて工数調整オプションで見積を調整\n4. 調整後の工数をプロジェクト計画に反映",
      "description": "自動生成された工数見積結果を表示する画面",
      "id": "SCR-015",
      "screenName": "工数見積結果画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門",
      "relatedBackendHandles": []
    },
    {
      "component": "提案資料プレビュー 編集ボタン エクスポートボタン",
      "accessRight": "ログインユーザー",
      "fileName": "proposal-view.tsx",
      "operatingProcedure": "1. 生成された提案資料をプレビュー\n2. 必要に応じて編集ボタンをクリックして内容を修正\n3. エクスポートボタンをクリックして提案資料をダウンロードまたは印刷",
      "description": "自動生成された提案資料を表示する画面",
      "id": "SCR-016",
      "screenName": "提案資料表示画面",
      "category": "表示",
      "user": "営業部門",
      "relatedBackendHandles": []
    },
    {
      "component": "全体進捗グラフ フェーズ別進捗状況 課題リスト",
      "accessRight": "ログインユーザー",
      "fileName": "progress-report-view.tsx",
      "operatingProcedure": "1. 全体進捗グラフで進捗状況を視覚的に確認\n2. フェーズ別進捗状況で詳細を確認\n3. 課題リストで現在の問題点や遅延要因を確認\n4. 必要に応じてプロジェクト計画の調整を検討",
      "description": "自動生成された進捗レポートを表示する画面",
      "id": "SCR-017",
      "screenName": "進捗レポート表示画面",
      "category": "表示",
      "user": "新規事業企画部門 開発部門 営業部門",
      "relatedBackendHandles": []
    }
  ]
}
